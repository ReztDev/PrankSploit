#!/usr/bin/python
import src.source.use
import src.banner.color
import src.Logging.print_stdout

try:
    import nmap
except ImportError:
    src.Logging.print_stdout.print_error("""
            Please install modules nmap and tools nmap!!
             - sudo apt-get install nmap
             - pip install python-nmap
    """)
    src.source.use.sys.exit(0)

def config_setting(_targetHost, _targetPort):
    try:
        convert = src.source.use.socket.gethostbyname(_targetHost)
        scanner = nmap.PortScanner()
        scanner.scan(_targetHost, _targetPort)
        state = scanner[_targetHost]['tcp'][int(_targetPort)]['state']
        if state == "closed":
            src.Logging.print_stdout.print_warning(
                "{host} ({ip}) {port} -> {state}".format(
                    host=_targetHost,
                    ip=convert,
                    port=_targetPort,
                    state=state
                )
            )
        else:
            src.Logging.print_stdout.print_process(
                "{host} ({ip}) {port} -> {state}".format(
                    host=_targetHost,
                    ip=convert,
                    port=_targetPort,
                    state=state
                )
            )
    except KeyboardInterrupt:
        src.Logging.print_stdout.print_error(
            "Interrupt by user... Exit!!"
        )

def start_scan(host, port):
    try:
        start = src.source.use.time.time()
        specify_port = str(port).split(",")
        for scanport in specify_port:
            config_setting(host, scanport)
        end = src.source.use.time.time()
        src.Logging.print_stdout.print_process(
            "Completed scanning at %s seconds." % (
                round(end-start)
            )
        )
    except KeyboardInterrupt:
        src.Logging.print_stdout.print_error(
            "Interrupt user. Exiting.."
        ); src.source.use.time.sleep(1)
    except IOError as error:
        src.Logging.print_stdout.print_error(
            "Error => {error}".format(
                error=str(error[0])
            )
        )
        