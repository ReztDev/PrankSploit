#!/usr/bin/python
import src.source.use
from src.Logging.print_stdout import print_error, print_warning, print_process

min_port = 1
max_port = 65535

def scan_port(host, port, r_code=1):
    try:
        sock = src.source.use.socket.socket(src.source.use.socket.AF_INET, src.source.use.socket.SOCK_STREAM)
        code = sock.connect_ex((host, port))
        if code == 0:
            r_code = code
        sock.close()
    except src.source.use.socket.error as socketError:
        print_error(str(socketError))
        src.source.use.sys.exit(0)


class Port_Scanner(object):
    def __init__(self, hostname):
        self.hostname = hostname
        if not self.hostname:
            print_warning("Please input your target!")
            src.source.use.sys.exit(1)

    def run_scan(self):
        try:
            print
            start = src.source.use.time.time()
            print_process(
                    "Starting Port Scanning at {time}".format(
                    time=src.source.use.time.strftime("%H:%M:%S %p")
                )
            )
            print_process(
                    "Scanning host {0} ({1})".format(
                    self.hostname, 
                    src.source.use.socket.gethostbyname(
                        self.hostname
                    )
                )
            )
            for port in range(min_port, max_port):
                try:
                    response = scan_port(self.hostname, port)
                    if response == 0:
                        print_process("Port is open -> {}".format(port))
                except Exception:
                    print_error("Canceling...")
                    src.source.use.sys.exit(0)
            end = src.source.use.time.time()
            print_process("Scanning completed at %s seconds" % round(end-start))
        except KeyboardInterrupt:
            print_warning("Exiting...")