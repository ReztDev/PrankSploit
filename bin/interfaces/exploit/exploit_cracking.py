#!/usr/bin/python
import src.source.use
import bin.interfaces.MainConsole
from src.Logging.print_stdout import print_error
from src.banner.color import pycolor_style
from src.process.MainProcess import Process_Shell
from bin.exploit.pycrack.pycrack import MainCracking_Password
from bin.interfaces.source.help_interfaces.exploit.help_cracker import showHelpMessage, showOptionsMessage

password = ''
dictionary = ''
class Exploit_Cracker(object):
    def __init__(self, values):
        self.settings = values

    def main_exploit(self):
        global password, dictionary
        try:
            if self.settings == "help":
                print(showHelpMessage())

            elif self.settings == "show options":
                print(showOptionsMessage(password, dictionary))

            elif self.settings == "back":
                bin.interfaces.MainConsole.main_interfaces()

            elif "set PASS" in self.settings:
                try:
                    password = self.settings.split()[2]
                    print("PASSWORD => {}".format(password))
                except IndexError:
                    print_error("Required password hash!!")

            elif "set DICT" in self.settings:
                try:
                    dictionary = self.settings.split()[2]
                    print("WORDLIST => {}".format(dictionary))
                except IndexError:
                    print_error("Required wordlist file!!")

            elif self.settings == "crack":
                if password != "" and dictionary != "":
                    crack = MainCracking_Password(password, dictionary)
                    crack.runCrack()
                else:
                    print(showOptionsMessage(password, dictionary))

            else:
                process = Process_Shell(self.settings)
                process.main_process()
                
        except IOError as error:
            print_error(str(error))

def Main_Interactive_Cracker():
    try:
        while True:
            cmd = raw_input("{lines}prsf{line} exploit({red}cracker{reds}) > ".format(
                lines=pycolor_style.L, line=pycolor_style.W, red=pycolor_style.R, reds=pycolor_style.W
            ))
            ck = Exploit_Cracker(cmd)
            ck.main_exploit()
            if cmd == "exit":
                src.source.use.sys.exit(0)
    except KeyboardInterrupt:
        print
        print_error('Interrupt by user, command "exit" to quit!!')
        bin.interfaces.exploit.exploit_cracking.Main_Interactive_Cracker()
    except EOFError:
        src.source.use.sys.exit()