#!/usr/bin/python
from src.Logging.print_stdout import print_error
from src.banner.color import pycolor_style
from src.process.MainProcess import Process_Shell
from bin.exploit.changerMac import ReplaceMAC_Linux, ReplaceMAC_Android
import bin.interfaces.MainConsole
from bin.interfaces.source.help_interfaces.exploit.help_mac import showHelpMessage_Linux, showOptionMessage_Linux
from bin.interfaces.source.help_interfaces.exploit.help_mac import showHelpMessage_Android, showOptionsMessage_Android

mac_address = ""
interfaces = ""
class Exploit_Replace_forLinux(object):
	def __init__(self, commands):
		self.values = commands

	def main_exploit(self):
		global mac_address, interfaces
		try:
			if self.values == "help":
				print(showHelpMessage_Linux())

			elif self.values == "show options":
				print(showOptionMessage_Linux(mac_address, interfaces))

			elif self.values == "back":
				bin.interfaces.MainConsole.main_interfaces()

			elif "set MAC" in self.values:
				try:
					mac_address = self.values.split()[2]
					print("MAC => {}".format(mac_address))
				except IndexError:
					print_error("Required the mac address to replace!!")

			elif "set IFACE" in self.values:
				try:
					interfaces = self.values.split()[2]
					print("IFACE => {}".format(interfaces))
				except IndexError:
					print_error("Required your interfaces!!")

			elif self.values == "run":
				print
				if mac_address != "" and interfaces != "":
					linux = ReplaceMAC_Linux(interfaces, mac_address)
					linux.with_random()
				else:
					print(showOptionMessage_Linux(mac_address, interfaces))

			else:
				proc = Process_Shell(self.values)
				proc.main_process()

		except:
			pass
mac = ""
iface = ""
class Exploit_Replace_forAndroid(object):
	def __init__(self, commands):
		self.values = commands

	def main_exploit(self):
		global mac, iface
		try:
			if self.values == "help":
				print(showHelpMessage_Android())

			elif self.values == "show options":
				print(showOptionsMessage_Android(mac, iface))

			elif self.values == "back":
				bin.interfaces.MainConsole.main_interfaces()

			elif "set MAC" in self.values:
				try:
					mac = self.values.split()[2]
					print("MAC => {}".format(mac))
				except IndexError:
					print_error("Required your mac address to replace!!")

			elif "set IFACE" in self.values:
				try:
					iface = self.values.split()[2]
					print("IFACE => {}".format(iface))
				except IndexError:
					print_error("Required your interfaces!!")

			elif self.values == "run":
				print
				if mac != "" and iface != "":
					droid = ReplaceMAC_Android(iface, mac)
					droid.replace_random()
				else:
					print(showOptionsMessage_Android(mac, iface))

			else:
				proc = Process_Shell(self.values)
				proc.main_process()

		except:
			pass

# Linux Interactive
def Main_Interactive_Linux():
	try:
		while True:
			cmd = raw_input("{ln}prsf{ln1} exploit({rd}mac_address_linux{rd1}) > ".format(
				ln=pycolor_style.L, ln1=pycolor_style.W, rd=pycolor_style.R, rd1=pycolor_style.W
			))
			lnx = Exploit_Replace_forLinux(cmd)
			lnx.main_exploit()
			if cmd == "exit":
				exit(0)
	except KeyboardInterrupt:
		print_error('Interrupt by user, command "exit" to quit!')
		Main_Interactive_Linux()

# Android Interactive
def Main_Interactive_Android():
	try:
		while True:
			cmd = raw_input("{ln}prsf{ln1} exploit({rd}mac_address_android{rd1}) > ".format(
				ln=pycolor_style.L, ln1=pycolor_style.W, rd=pycolor_style.R, rd1=pycolor_style.W
			))
			drd = Exploit_Replace_forAndroid(cmd)
			drd.main_exploit()
			if cmd == "exit":
				exit(0)
	except KeyboardInterrupt:
		print_error('Interrupt by user, command "exit" to quit!')
		Main_Interactive_Android()