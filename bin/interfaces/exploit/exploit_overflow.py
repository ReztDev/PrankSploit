#!/usr/bin/python
from src.banner.color import pycolor_style
from src.process.MainProcess import Process_Shell
from src.Logging.print_stdout import print_error
from bin.exploit.BufferOverflow import Buffer_Overflow
import bin.interfaces.MainConsole
from bin.interfaces.source.help_interfaces.exploit.help_overflow import showHelpMessage, showOptionsMessage

ip_address = ""
port_address = ""
class Exploit_Buffer_Overflow(object):
    def __init__(self, commands):
        self.value = commands

    def main_exploit(self):
        global ip_address, port_address
        try:
            if self.value == "help":
                print(showHelpMessage())

            elif self.value == "show options":
                print(showOptionsMessage(ip_address, port_address))

            elif self.value == "back":
                bin.interfaces.MainConsole.main_interfaces()

            elif "set HOST" in self.value:
                try:
                    ip_address = self.value.split()[2]
                    print("HOST => {}".format(ip_address))
                except IndexError:
                    print_error("Required host target!!")

            elif "set PORT" in self.value:
                try:
                    port_address = int(self.value.split()[2])
                    print("PORT => {}".format(port_address))
                except IndexError:
                    print_error("Required port address target!!")

            elif self.value == "run":
                if ip_address != "" and port_address != "":
                    buff = Buffer_Overflow(ip_address, port_address)
                    buff.run_overflow()
                else:
                    print(showOptionsMessage(ip_address, port_address))

            else:
                proc = Process_Shell(self.value)
                proc.main_process()

        except IOError as error:
            print_error(str(error))

def Main_Interactive_Overflow():
    try:
        while True:
            cmd = raw_input("{ln}prsf{ls} exploit({rd}buffer_overflow{rds}) > ".format(
                ln=pycolor_style.L, ls=pycolor_style.W, rd=pycolor_style.R, rds=pycolor_style.W
            ))
            exp = Exploit_Buffer_Overflow(cmd)
            exp.main_exploit()
            if cmd == "exit":
                exit(0)
    except KeyboardInterrupt:
        print_error('Interrupt by user, command "exit" to quit!!')
        Main_Interactive_Overflow()