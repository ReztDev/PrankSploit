#!/usr/bin/python
from src.Logging.print_stdout import print_error
from src.banner.color import pycolor_style
from src.process.MainProcess import Process_Shell
from bin.exploit.Flood import UDP_Flooding
import bin.interfaces.MainConsole
from bin.interfaces.source.help_interfaces.exploit.help_flood import showHelpMessage, showOptionsMessage

host = ""
port = ""
class Exploit_Flood_Interfaces(object):
	def __init__(self, commands):
		self.values = commands

	def main_exploit(self):
		global host, port
		try:
			if self.values == "help":
				print(showHelpMessage())

			elif self.values == "show options":
				print(showOptionsMessage(host, port))

			elif self.values == "back":
				bin.interfaces.MainConsole.main_interfaces()

			elif "set HOST" in self.values:
				try:
					host = self.values.split()[2]
					print("HOST => {}".format(host))
				except IndexError:
					print_error("Required host target!!")

			elif "set PORT" in self.values:
				try:
					port = int(self.values.split()[2])
					print("PORT => {}".format(port))
				except IndexError:
					print_error("Required port target!!")

			elif self.values == "run":
				if host != "" and port != "":
					print
					udp = UDP_Flooding(host, port)
					udp.main()
				else:
					print(showOptionsMessage(host, port))

			else:
				proc = Process_Shell(self.values)
				proc.main_process()

		except:
			pass

def Main_Interactive_Flood():
	try:
		while True:
			cmd = raw_input("{ln1}prsf{ln2} exploit({rd1}udp_flooder{rd2}) > ".format(
				ln1=pycolor_style.L, ln2=pycolor_style.W, rd1=pycolor_style.R, rd2=pycolor_style.W
			))
			udp = Exploit_Flood_Interfaces(cmd)
			udp.main_exploit()
			if cmd == "exit":
				exit(0)
	except KeyboardInterrupt:
		print_error('Interrupt by user, command "exit" to quit!!')
		Main_Interactive_Flood()